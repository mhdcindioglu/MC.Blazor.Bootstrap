<span class="badge text-bg-@(BgColor.ToString().ToLower()) @positionClass @(Rounded ? "rounded-pill" : null) @(Type == MC_BadgeType.Circle ? "p-2 border border-light rounded-circle" : null)" style="@style">
    @if(Type == MC_BadgeType.Normal)
    {
        @ChildContent
    }
    else
    {
        <span class="visually-hidden">New alerts</span>
    }
</span>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Rounded { get; set; }
    [Parameter] public MC_Position Position { get; set; } = MC_Position.Default;
    [Parameter] public MC_BgColor BgColor { get; set; } = MC_BgColor.Secondary;
    [Parameter] public MC_BadgeType Type { get; set; } = MC_BadgeType.Normal;
    string? positionClass => Position switch
    {
        MC_Position.StartTop => "position-absolute translate-middle top-0 start-0",
        MC_Position.MiddleTop => "position-absolute translate-middle top-0 start-50",
        MC_Position.EndTop => "position-absolute translate-middle top-0 start-100",
        MC_Position.StartMiddle => "position-absolute translate-middle top-50 start-0",
        MC_Position.Middle => "position-absolute translate-middle top-50 start-50",
        MC_Position.EndMiddle => "position-absolute translate-middle top-50 start-100",
        MC_Position.StartBottom => "position-absolute translate-middle top-100 start-0",
        MC_Position.MiddleBottom => "position-absolute translate-middle top-100 start-50",
        MC_Position.EndBottom => "position-absolute translate-middle top-100 start-100",
        _ => null,
    };
    string? style => $"";

    public enum MC_BadgeType
    {
        Normal,
        Circle,
    }
}
